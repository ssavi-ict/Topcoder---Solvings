#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<bits/stdc++.h>

using namespace std;

int dp[57][57], len1, len2;

int LCS(int pos1, string str, int pos2, string ttr)
{
    if(pos1==len1 || pos2==len2)  return 0;
    if(dp[pos1][pos2]!=-1)  return dp[pos1][pos2];

    int ans = 0;
    if(str[pos1]==ttr[pos2]){
        ans = 1 + LCS(pos1+1, str, pos2+1, ttr);
    }
    else{
        ans = max(LCS(pos1, str, pos2+1, ttr), LCS(pos1+1, str, pos2, ttr));
    }
    dp[pos1][pos2] = ans;
    return dp[pos1][pos2];
}

class RepeatStringEasy {
public:
	int maximalLength(string s) {
		int len = s.size();
		string str, ttr;
		int maxlen = 0;
		for(int i=0; i<len; i++){
            str = str + s[i];
            ttr.clear();
            for(int j=i+1; j<len; j++){
                ttr = ttr + s[j];
            }
            memset(dp, -1, sizeof dp);
            len1 = str.size(), len2 = ttr.size();
            maxlen = max(maxlen, LCS(0, str, 0, ttr));
		}
		return 2*maxlen;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	RepeatStringEasy *obj;
	int answer;
	obj = new RepeatStringEasy();
	clock_t startTime = clock();
	answer = obj->maximalLength(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	int p1;

	{
	// ----- test 0 -----
	p0 = "frankfurt";
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "single";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "singing";
	p1 = 6;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "aababbababbabbbbabbabb";
	p1 = 18;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "x";
	p1 = 0;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
