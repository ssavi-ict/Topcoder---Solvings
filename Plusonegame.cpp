#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Plusonegame {
public:
	string getorder(string s) {
		int sz = s.size();
		vector<int>dig;
		int pl = 0;
		dig.push_back(0);
		for(int i=0; i<sz; i++)
        {
            if(s[i]=='+') pl++;
            else {
                int x = s[i] - '0';
                dig.push_back(x);
            }
        }
        sort(dig.begin(), dig.end());
        int cnt = 0, tot = 0, prev = 0;

        string res ="";
        for(int i=0; i<dig.size(); i++)
        {
            if(dig[i]==0){
                if(i>0)res = res + '0';
                continue;
            }
            for(int j=0; j<dig.size(); j++)
            {
                if(dig[i]==dig[j])
                {
                    int rem = dig[i] - dig[i-1];
                    for(int k=0; k<rem && pl>0; k++) {
                        res = res + '+';
                        pl--;
                    }
                    char an = dig[j] + '0';
                    res = res + an;
                    break;
                }
            }
        }
        if(pl>0) for(int i=0; i<pl; i++)  res = res + '+';
        return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	Plusonegame *obj;
	string answer;
	obj = new Plusonegame();
	clock_t startTime = clock();
	answer = obj->getorder(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;

	{
	// ----- test 0 -----
	p0 = "1++";
	p1 = "+1+";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "549";
	p1 = "459";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "++++++";
	p1 = "++++++";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "+++++2+";
	p1 = "++2++++";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "++++4++++200++2++1+6++++++";
	p1 = "00+1+22++4++6+++++++++++++";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "++11199999";
	p1 = "+111+99999";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
